name: Build and Deploy CV

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build PDF file
        run: |
          chmod +x build/build.sh
          sh build/build.sh

      - name: Verify HTML content
        run: |
          if [ ! -f "docs/index.html" ]; then
            echo "Error: index.html not found in docs directory"
            exit 1
          fi
          if [ ! -f "docs/assets/css/devresume.css" ]; then
            echo "Error: devresume.css not found in docs/assets/css directory"
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            NguyenQuangBinh_CV.pdf
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mark deployment in GitHub
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              required_contexts: [],
              environment: "release",
              description: "Deployed CV to GitHub Pages and Releases",
              auto_merge: false
            });

            await github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: "success",
              log_url: `https://${context.repo.owner}.github.io/${context.repo.repo}`,
              environment_url: `https://${context.repo.owner}.github.io/${context.repo.repo}`,
              description: "CV available on GitHub Pages and Releases"
            });
            console.log(`Deployment created: ${deployment.data.html_url}`);